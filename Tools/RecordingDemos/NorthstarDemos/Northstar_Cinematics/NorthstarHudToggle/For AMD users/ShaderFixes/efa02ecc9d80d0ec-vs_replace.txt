// ---- Created with 3Dmigoto v1.2.63 on Sun Jul 23 12:37:19 2017

cbuffer CBufCommonPerCamera : register(b2)
{
  float c_zNear : packoffset(c0);
  float3 c_cameraOrigin : packoffset(c0.y);
  row_major float4x4 c_cameraRelativeToClip : packoffset(c1);
  int c_frameNum : packoffset(c5);
  float3 c_cameraOriginPrevFrame : packoffset(c5.y);
  row_major float4x4 c_cameraRelativeToClipPrevFrame : packoffset(c6);
  float4 c_clipPlane : packoffset(c10);

  struct
  {
    float4 k0;
    float4 k1;
    float4 k2;
    float4 k3;
    float4 k4;
  } c_fogParams : packoffset(c11);

  float3 c_skyColor : packoffset(c16);
  float c_shadowBleedFudge : packoffset(c16.w);
  float c_envMapLightScale : packoffset(c17);
  float3 c_sunColor : packoffset(c17.y);
  float3 c_sunDir : packoffset(c18);
  float c_gameTime : packoffset(c18.w);

  struct
  {
    float3 shadowRelConst;
    bool enableShadows;
    float3 shadowRelForX;
    float unused_1;
    float3 shadowRelForY;
    float cascadeWeightScale;
    float3 shadowRelForZ;
    float cascadeWeightBias;
    float4 laterCascadeScale;
    float4 laterCascadeBias;
    float2 normToAtlasCoordsScale0;
    float2 normToAtlasCoordsBias0;
    float4 normToAtlasCoordsScale12;
    float4 normToAtlasCoordsBias12;
  } c_csm : packoffset(c19);

  uint c_lightTilesX : packoffset(c28);
  float c_minShadowVariance : packoffset(c28.y);
  float2 c_renderTargetSize : packoffset(c28.z);
  float2 c_rcpRenderTargetSize : packoffset(c29);
  float c_numCoverageSamples : packoffset(c29.z);
  float c_rcpNumCoverageSamples : packoffset(c29.w);
  float2 c_cloudRelConst : packoffset(c30);
  float2 c_cloudRelForX : packoffset(c30.z);
  float2 c_cloudRelForY : packoffset(c31);
  float2 c_cloudRelForZ : packoffset(c31.z);
  float c_sunHighlightSize : packoffset(c32);
  uint c_globalLightingFlags : packoffset(c32.y);
  uint c_useRealTimeLighting : packoffset(c32.z);
  float c_forceExposure : packoffset(c32.w);
  int c_debugInt : packoffset(c33);
  float c_debugFloat : packoffset(c33.y);
  float c_maxLightingValue : packoffset(c33.z);
  float c_viewportMaxZ : packoffset(c33.w);
  float2 c_viewportScale : packoffset(c34);
  float2 c_rcpViewportScale : packoffset(c34.z);
  float2 c_framebufferViewportScale : packoffset(c35);
  float2 c_rcpFramebufferViewportScale : packoffset(c35.z);
}

cbuffer CBufModelInstance : register(b3)
{

  struct
  {
    row_major float3x4 objectToCameraRelative;
    row_major float3x4 objectToCameraRelativePrevFrame;
    float4 diffuseModulation;
    int cubemapID;
    int lightmapID;
    float2 unused;

    struct
    {
      float4 ambientSH[3];
      float4 skyDirSunVis;
      uint4 packedLightData;
    } lighting;

  } c_modelInst : packoffset(c0);

}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  int4 v3 : TEXCOORD3,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out int4 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 params = IniParams.Load(0);
  if (params.x == 0)
  {
   o0 = 0;
   o1 = 0;
   o2 = 0;
   o3 = 0;
   return;
  } else {

  o0.xyzw = v1.xyzw;
  o1.xy = v2.xy;
  o2.xyzw = v3.xyzw;
  r0.x = dot(v0.xyz, c_modelInst.objectToCameraRelative._m00_m01_m02);
  r0.x = c_modelInst.objectToCameraRelative._m03 + r0.x;
  r0.w = dot(v0.xyz, c_modelInst.objectToCameraRelative._m10_m11_m12);
  r0.y = c_modelInst.objectToCameraRelative._m13 + r0.w;
  r0.w = dot(v0.xyz, c_modelInst.objectToCameraRelative._m20_m21_m22);
  r0.z = c_modelInst.objectToCameraRelative._m23 + r0.w;
  r0.w = dot(r0.xyz, c_cameraRelativeToClip._m00_m01_m02);
  o3.x = c_cameraRelativeToClip._m03 + r0.w;
  r0.w = dot(r0.xyz, c_cameraRelativeToClip._m10_m11_m12);
  o3.y = c_cameraRelativeToClip._m13 + r0.w;
  r0.w = dot(r0.xyz, c_cameraRelativeToClip._m20_m21_m22);
  r0.x = dot(r0.xyz, c_cameraRelativeToClip._m30_m31_m32);
  o3.w = c_cameraRelativeToClip._m33 + r0.x;
  o3.z = c_cameraRelativeToClip._m23 + r0.w;
  return;
  }
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler For Durango
//
//   using 3Dmigoto v1.2.63 on Sun Jul 23 12:37:19 2017
//
//
// Buffer Definitions: 
//
// cbuffer CBufCommonPerCamera
// {
//
//   float c_zNear;                     // Offset:    0 Size:     4 [unused]
//   float3 c_cameraOrigin;             // Offset:    4 Size:    12 [unused]
//   row_major float4x4 c_cameraRelativeToClip;// Offset:   16 Size:    64
//   int c_frameNum;                    // Offset:   80 Size:     4 [unused]
//   float3 c_cameraOriginPrevFrame;    // Offset:   84 Size:    12 [unused]
//   row_major float4x4 c_cameraRelativeToClipPrevFrame;// Offset:   96 Size:    64 [unused]
//   float4 c_clipPlane;                // Offset:  160 Size:    16 [unused]
//   
//   struct FogUnion
//   {
//       
//       float4 k0;                     // Offset:  176
//       float4 k1;                     // Offset:  192
//       float4 k2;                     // Offset:  208
//       float4 k3;                     // Offset:  224
//       float4 k4;                     // Offset:  240
//
//   } c_fogParams;                     // Offset:  176 Size:    80 [unused]
//   float3 c_skyColor;                 // Offset:  256 Size:    12 [unused]
//   float c_shadowBleedFudge;          // Offset:  268 Size:     4 [unused]
//   float c_envMapLightScale;          // Offset:  272 Size:     4 [unused]
//   float3 c_sunColor;                 // Offset:  276 Size:    12 [unused]
//   float3 c_sunDir;                   // Offset:  288 Size:    12 [unused]
//   float c_gameTime;                  // Offset:  300 Size:     4 [unused]
//   
//   struct CSMConstants_t
//   {
//       
//       float3 shadowRelConst;         // Offset:  304
//       bool enableShadows;            // Offset:  316
//       float3 shadowRelForX;          // Offset:  320
//       float unused_1;                // Offset:  332
//       float3 shadowRelForY;          // Offset:  336
//       float cascadeWeightScale;      // Offset:  348
//       float3 shadowRelForZ;          // Offset:  352
//       float cascadeWeightBias;       // Offset:  364
//       float4 laterCascadeScale;      // Offset:  368
//       float4 laterCascadeBias;       // Offset:  384
//       float2 normToAtlasCoordsScale0;// Offset:  400
//       float2 normToAtlasCoordsBias0; // Offset:  408
//       float4 normToAtlasCoordsScale12;// Offset:  416
//       float4 normToAtlasCoordsBias12;// Offset:  432
//
//   } c_csm;                           // Offset:  304 Size:   144 [unused]
//   uint c_lightTilesX;                // Offset:  448 Size:     4 [unused]
//   float c_minShadowVariance;         // Offset:  452 Size:     4 [unused]
//   float2 c_renderTargetSize;         // Offset:  456 Size:     8 [unused]
//   float2 c_rcpRenderTargetSize;      // Offset:  464 Size:     8 [unused]
//   float c_numCoverageSamples;        // Offset:  472 Size:     4 [unused]
//   float c_rcpNumCoverageSamples;     // Offset:  476 Size:     4 [unused]
//   float2 c_cloudRelConst;            // Offset:  480 Size:     8 [unused]
//   float2 c_cloudRelForX;             // Offset:  488 Size:     8 [unused]
//   float2 c_cloudRelForY;             // Offset:  496 Size:     8 [unused]
//   float2 c_cloudRelForZ;             // Offset:  504 Size:     8 [unused]
//   float c_sunHighlightSize;          // Offset:  512 Size:     4 [unused]
//   uint c_globalLightingFlags;        // Offset:  516 Size:     4 [unused]
//   uint c_useRealTimeLighting;        // Offset:  520 Size:     4 [unused]
//   float c_forceExposure;             // Offset:  524 Size:     4 [unused]
//   int c_debugInt;                    // Offset:  528 Size:     4 [unused]
//   float c_debugFloat;                // Offset:  532 Size:     4 [unused]
//   float c_maxLightingValue;          // Offset:  536 Size:     4 [unused]
//   float c_viewportMaxZ;              // Offset:  540 Size:     4 [unused]
//   float2 c_viewportScale;            // Offset:  544 Size:     8 [unused]
//   float2 c_rcpViewportScale;         // Offset:  552 Size:     8 [unused]
//   float2 c_framebufferViewportScale; // Offset:  560 Size:     8 [unused]
//   float2 c_rcpFramebufferViewportScale;// Offset:  568 Size:     8 [unused]
//
// }
//
// cbuffer CBufModelInstance
// {
//
//   struct ModelInstance
//   {
//       
//       row_major float3x4 objectToCameraRelative;// Offset:    0
//       row_major float3x4 objectToCameraRelativePrevFrame;// Offset:   48
//       float4 diffuseModulation;      // Offset:   96
//       int cubemapID;                 // Offset:  112
//       int lightmapID;                // Offset:  116
//       float2 unused;                 // Offset:  120
//       
//       struct ModelInstanceLighting
//       {
//           
//           float4 ambientSH[3];       // Offset:  128
//           float4 skyDirSunVis;       // Offset:  176
//           uint4 packedLightData;     // Offset:  192
//
//       } lighting;                    // Offset:  128
//
//   } c_modelInst;                     // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CBufCommonPerCamera               cbuffer      NA          NA    2        1
// CBufModelInstance                 cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// TEXCOORD                 3   xyzw        3     NONE     int   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xy          1     NONE   float   xy  
// TEXCOORD                 2   xyzw        2     NONE     int   xyzw
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0

dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[5], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_temps 1
mov o0.xyzw, v1.xyzw
mov o1.xy, v2.xyxx
mov o2.xyzw, v3.xyzw
dp3 r0.x, v0.xyzx, cb3[0].xyzx
add r0.x, r0.x, cb3[0].w
dp3 r0.w, v0.xyzx, cb3[1].xyzx
add r0.y, r0.w, cb3[1].w
dp3 r0.w, v0.xyzx, cb3[2].xyzx
add r0.z, r0.w, cb3[2].w
dp3 r0.w, r0.xyzx, cb2[1].xyzx
add o3.x, r0.w, cb2[1].w
dp3 r0.w, r0.xyzx, cb2[2].xyzx
add o3.y, r0.w, cb2[2].w
dp3 r0.w, r0.xyzx, cb2[3].xyzx
dp3 r0.x, r0.xyzx, cb2[4].xyzx
add o3.w, r0.x, cb2[4].w
add o3.z, r0.w, cb2[3].w
ret 



// Approximately 18 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
